a, b, c  (a +ｂ +ｃ）<= X 


int find(int[] A, int n, int t) {
        int result = 0;
        sort(A, A + n);
        for (int i = 0; i < n - 2; ++i) {
                int j = i + 1, k = n - 1;
                while (j < k) {
                        int cur = A[i] + A[j] + A[k];
                        int oj = A[j++];
                        while (j < n && A[j] == oj) j += 1;
                        int ok = A[k--];
                        while (k >= 0 && A[k] == ok) k -= 1;
                        j -= 1;
                        k += 1;
                        if (cur <= t) {
                                result += (k - j);
                                j += 1;
                        } else {
                                k -= 1;
                        }
                }
        }
        return result;
}

int find(int[] A, int n, int t) {
  int result = 0;
  sort(A, A + n);
  for (int i = 0; i < n - 2; ++i) {
    if (i != 0 && A[i] == A[i - 1]) continue;
    int j = i + 1, k = n - 1;
    while (j < k) {
      int cur = A[i] + A[j] + A[k];
      while (j + 1 < k && A[j + 1] == A[j]) j += 1;
      while (k - 1 > j && A[k - 1] == A[k]) k -= 1;
      if (cur <= t) {
        result += (k - j);
        j += 1;
      } else {
        k -= 1;
      }
    }
  }
  return result;
}

1 2 3 4 5 6 


S N B S N 
B A K E A 
B K B B K 
S E B S E 


SNAKE 3


\


int pathHelper(vector<vector<char> > & board, const string& word, vector<vector<bool> >& visited, int i, int j) {
        if (word.empty()) return 1;
        int m = board.size(), n = board[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || board[i][j] != word[0]) return 0;
        
        visited[i][j] = true;
        string new_word = word.substr(1);
        int result = pathHelper(board, new_word, visited, i - 1, j) + pathHelper(board, new_word, visited, i + 1, j) + pathHelper(board, new_word, visited, i, j - 1) + pathHelper(board, new_word, visited, i, j + 1);


        visted[i][j] = false;
        return result;
}


int pathes(vector<vector<char> > & board, const string& word) {
        if (board.empty()) return 0;
        int m = board.size(), n = board[0].size(), result = 0;
        vector<vector<bool> > visited;


        for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; j++) {
                        result += pathHelper(board, word, visited, i, j);
                }
        }
        return result;
}
